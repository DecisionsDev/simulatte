version: '3.9'
services:
  simulation-service:
    image: simulatte/simulation-service:latest
    build:
      context: ./
      dockerfile: ./dev/Dockerfile
    volumes:
      - $PWD/data/ADS:/home/jovyan/work/data/ADS
      - $PWD/data/ODM:/home/jovyan/work/data/ODM
      - $PWD/libs:/home/jovyan/work/libs
      - $PWD/notebooks/ADS:/home/jovyan/work/notebooks/ADS
      - $PWD/notebooks/ODM:/home/jovyan/work/notebooks/ODM
      - $PWD/notebooks/challenges:/home/jovyan/work/notebooks/challenges
      - $PWD/notebooks/optimization:/home/jovyan/work/notebooks/optimization
      - $HOME/.m2:/root/.m2 # Mount your local Maven repository into build container to prevent repeated downloads
    container_name: simulation-service
    restart: on-failure
    ports:
      - "8080:8080" #Java server
      - "4040:4040" #Spark UI 
    depends_on:
      simulatte-db:
         condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://simulatte-db:5432/simulatte
      - SPRING_DATASOURCE_USERNAME=simulatte
      - SPRING_DATASOURCE_PASSWORD=simulatte
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SIMULATTE_ANALYTIC_HOSTNAME=analytic-service
  
  analytic-service:
    image: simulatte/analytic-service
    build:
      context: dev/simulatte-analytic/
      dockerfile: Dockerfile
    volumes:
      - $PWD/data/ADS:/home/jovyan/work/data/ADS
      - $PWD/data/ODM:/home/jovyan/work/data/ODM
      - $PWD/notebooks/ADS:/home/jovyan/work/notebooks/ADS
      - $PWD/notebooks/ODM:/home/jovyan/work/notebooks/ODM
      - $PWD/notebooks/challenges:/home/jovyan/work/notebooks/challenges
      - $PWD/notebooks/optimization:/home/jovyan/work/notebooks/optimization
    command: python manage.py runserver 0.0.0.0:8000
    container_name: analytic-service
    restart: on-failure
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_NAME=simulatte
      - POSTGRES_USER=simulatte
      - POSTGRES_PASSWORD=simulatte
      - POSTGRES_HOST=simulatte-db
    depends_on:
      simulatte-db:
         condition: service_healthy
  
  notebooks:
    image: simulatte/notebooks
    build:
      context: notebooks/
    container_name: notebooks
    restart: on-failure
    ports:
      - "8888:8888"
    environment:
      - SIMULATTE_BASE_DIR=/home/jovyan/work
      - SIMULATTE_ONLINE_HOSTNAME=simulation-service
      - SIMULATTE_ANALYTIC_HOSTNAME=analytic-service
      - SIMULATTE_ODM_HOSTNAME=odm
    volumes:
      - $PWD/data/ADS:/home/jovyan/work/data/ADS
      - $PWD/data/ODM:/home/jovyan/work/data/ODM
      - $PWD/notebooks/ADS:/home/jovyan/work/notebooks/ADS
      - $PWD/notebooks/ODM:/home/jovyan/work/notebooks/ODM
      - $PWD/notebooks/challenges:/home/jovyan/work/notebooks/challenges
      - $PWD/notebooks/optimization:/home/jovyan/work/notebooks/optimization

  odm:
    image: icr.io/odm-k8s/odm:8.11
    container_name: odm
    restart: on-failure
    ports:
      - "9060:9060"
      - "9443:9443"
    environment:
      - JVM_ARGS='-Xmx3000m'
      - LICENSE=accept
      - SAMPLE=false
    volumes:
      - ./volumes/ODM/miniloan:/config/dbdata/

        
  simulatte-db:
    image: simulatte/database
    build:
      context: dev/simulatte-online/database/
    container_name: simulatte-db
    volumes:
      - ./data/simulatte-db:/var/lib/postgresql/
      - ./data/simulatte-db/data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=simulatte
      - POSTGRES_USER=simulatte
      - POSTGRES_DB=simulatte
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U simulatte"]
      interval: 10s
      timeout: 5s
      retries: 5


  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./dev/simulatte-online/monitoring/prometheus:/etc/prometheus/
      - ./data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"

  #telegraf:
  #  runtime: nvidia
  #  environment:
  #    - NVIDIA_VISIBLE_DEVICES=all
  #  volumes:
  #    - ./docker/telegraf/telegraf-gpu.conf:/etc/telegraf/telegraf.conf


  grafana:
    image: grafana/grafana
    pull_policy: always
    container_name: grafana
    restart: unless-stopped
    links:
      - prometheus:prometheus
    volumes:  
      - ./data/grafana:/var/lib/grafana
      - ./dev/simulatte-online/monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./dev/simulatte-online/monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_DOMAIN=localhost
      - DS_PROMETHEUS=prometheus
    ports:
      - "3000:3000"


  keycloak:
    image: docker.io/bitnami/keycloak:19
    depends_on:
      - simulatte-db
    ports:
      - "8090:8090"
    environment:
      - KEYCLOAK_HTTP_PORT=8090

      - KEYCLOAK_ADMIN_USER=simulatte
      - KEYCLOAK_ADMIN_PASSWORD=simulatte

      - KEYCLOAK_DATABASE_HOST=simulatte-db
      - KEYCLOAK_DATABASE_PORT=5432
      - KEYCLOAK_DATABASE_NAME=simulatte
      - KEYCLOAK_DATABASE_USER=simulatte
      - KEYCLOAK_DATABASE_PASSWORD=simulatte



#  alertmanager:
#    container_name: alertmanager
#    hostname: alertmanager
#    image: prom/alertmanager
#    volumes:
#      - ./alertmanager.conf:/etc/alertmanager/alertmanager.conf
#    command:
#      - '--config.file=/etc/alertmanager/alertmanager.conf'
#    ports:
#      - 9093:9093

  #localstack:
  #  container_name: "${LOCALSTACK_DOCKER_NAME-localstack_main}"
  #  image: localstack/localstack:latest
  #  network_mode: bridge
  #  ports:
  #    - "4567-4584:4567-4584"
  #    - "8055:8080"
  #  environment:
  #    - SERVICES=s3
  #    - DEBUG=1
  #    - DATA_DIR=/var/folders/51/fmq0x9kd393g91nzkqpbjvh00000gn/T/localstack/data
  #  volumes:
  #    - "${TMPDIR:-/tmp}/localstack:/tmp/localstack"
  #    - "/var/run/docker.sock:/var/run/docker.sock"
#volumes:
  #notebooks:
    #external: true